package Controler;

import java.sql.*;
import Model.*;

public class ControlerOwner extends ControlerConection {
	private String cpf;
	private String name;
	private String rg;
	private String ddd;
	private String phone;
	private String email;
	private int totalOwner = 0;
	
	public int[] appartents;
	
	private ModelOwner[] modelOwners;
	
	// Construtores
	public ControlerOwner() {
	}

	public ControlerOwner(String cpf, String name) {
		this.cpf = cpf;
		this.name = name;
		this.rg = null;
		this.ddd = null;
		this.phone = null;
		this.email = null;
	}
	
	public ControlerOwner(String cpf, String name, String rg, String ddd, String phone, String email) {
		this.cpf = cpf;
		this.name = name;
		this.rg = rg;
		this.ddd = ddd;
		this.phone = phone;
		this.email = email;
	}

	// getter and setter
	public String getCpf() {
		return cpf;
	}

	public void setCpf(String cpf) {
		this.cpf = cpf;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getRg() {
		return rg;
	}

	public void setRg(String rg) {
		this.rg = rg;
	}

	public String getDdd() {
		return ddd;
	}

	public void setDdd(String ddd) {
		this.ddd = ddd;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}
			
	public int getTotalOwner() {
		return totalOwner;
	}

	public void setTotalOwner(int totalOwner) {
		this.totalOwner = totalOwner;
	}
	
	public int[] getAppartents() {
		return appartents;
	}

	public void setAppartents(int[] appartents) {
		this.appartents = appartents;
	}

	public ModelOwner[] getModelOwners() {
		return modelOwners;
	}

	public void setModelOwners(ModelOwner[] modelOwners) {
		this.modelOwners = modelOwners;
	}
	
	// Inserts
	public void insertOwner() {
		try {
			conecting();
			
			conn = conecting();
			comandSql = conn.createStatement();
			comandSql.executeUpdate("insert into pessoas values('" + cpf + "', '" + name + "', '" + rg + "', '" + ddd + "', '" + phone + "', '" + email + "')");
			System.out.println("Dados inseridos com sucesso: " + conn);
			
			closeConection(conn);

		} catch (SQLException e) {
			System.out.println("Erro de inserction: " + e);
		}
	}
	
	// Selects	
	public void selectOwner(String cnpj) {
		
		int i = 0;
		try {
			conecting();
			
			conn = conecting();
			comandSql = conn.createStatement();
			rs = comandSql.executeQuery("select count(*) from pessoas p inner join apartamentoPessoa ap on p.cpf = ap.cpf inner join apartamentos aps on ap.apartamento = aps.apartamento where cnpj = 'p." + cnpj + "'");
			
			if(rs.next()) {
				totalOwner = rs.getInt("count(*)");
			}
			
			modelOwners = new ModelOwner[totalOwner];
			rs = comandSql.executeQuery("select * from pessoas p inner join apartamentoPessoa ap on p.cpf = ap.cpf inner join apartamentos aps on ap.apartamento = aps.apartamento where cnpj = 'p." + cnpj + "'");
			
			while(rs.next()) {
				if(rs.getString("p.rg") != null) {
					cpf = rs.getString("p.cpf");
					name = rs.getString("p.nome");
					rg = rs.getString("p.rg");
					ddd = rs.getString("p.telefoneDdd");
					phone = rs.getString("p.telefone");
					email = rs.getString("p.email");
					
					modelOwners[i] = new ModelOwner(cpf, name, rg, ddd, phone, email);
					
				} else {
					cpf = rs.getString("p.cpf");
					name = rs.getString("p.nome");
					
					modelOwners[i] = new ModelOwner(cpf, name);
					
				}
				
				i++;
			}

			closeConection(conn);
			
		} catch(SQLException e) {
			System.out.println("Erro de select: " + e);
		}
	}
	
	public void selectOwner(int appartment, String consulta) {
		
		int i = 0;
		try {
			conecting();
			
			conn = conecting();
			comandSql = conn.createStatement();
			rs = comandSql.executeQuery("select count(*) from pessoas p inner join apartamentopessoa a on p.cpf = a.cpf  inner join apartamentos ap on a.apartamento = ap.apartamento where ap." + consulta + " = " + appartment);
			
			if(rs.next()) {
				totalOwner = rs.getInt("count(*)");
			}
			
			modelOwners = new ModelOwner[totalOwner];
			rs = comandSql.executeQuery("select * from pessoas p inner join apartamentopessoa a on p.cpf = a.cpf  inner join apartamentos ap on a.apartamento = ap.apartamento where ap." + consulta + " = " + appartment + " order by nome");
			
			while(rs.next()) {
				if(rs.getString("rg") != null) {
					cpf = rs.getString("cpf");
					name = rs.getString("nome");
					rg = rs.getString("rg");
					ddd = rs.getString("telefoneDdd");
					phone = rs.getString("telefone");
					email = rs.getString("email");
					
					modelOwners[i] = new ModelOwner(cpf, name, rg, ddd, phone, email);
					
				} else {
					cpf = rs.getString("cpf");
					name = rs.getString("nome");
					
					modelOwners[i] = new ModelOwner(cpf, name);
					
				}
				
				i++;
			}

			closeConection(conn);
			
		} catch(SQLException e) {
			System.out.println("Erro de select: " + e);
		}
	}
	
	public void selectAppartments(String cnpj) {
		int i = 0;
		try {
			conecting();
			
			conn = conecting();
			comandSql = conn.createStatement();
			rs = comandSql.executeQuery("select count(*) from apartamentos where cnpj = '" + cnpj + "'");
			if(rs.next()) {
				totalOwner = rs.getInt("count(*)");
			}
			appartents = new int[totalOwner];
			
			rs = comandSql.executeQuery("select * from apartamentos where cnpj = '" + cnpj + "'");
			while(rs.next()) {
				appartents[i] = rs.getInt("apartamento");
				i++;
			}
			
			closeConection(conn);
			
		} catch (SQLException e) {
			System.out.println("Erro de select: " + e);

		}
	}
	
	// Deletes
	public void deleteOwner(String cpf) {
		try {
			conecting();
			
			conn = conecting();
			comandSql = conn.createStatement();
			comandSql.executeUpdate("delete from apartamentopessoa where cpf = '" + cpf + "'");
			comandSql.executeUpdate("delete from pessoas where cpf = '" + cpf + "'");
						
			closeConection(conn);
			
		} catch (SQLException e) {
			System.out.println("Erro de delete: " + e);
		}
	}
	
	// Updates
	public void updateOwner(String cpf, String name, String rg, String ddd, String phone, int appartment, String email) {
		try {
			conecting();
			
			conn = conecting();
			comandSql = conn.createStatement();
			comandSql.executeUpdate("update apartamentopessoa set apartamento = " + appartment + " where cpf = '" + cpf + "'");
			comandSql.executeUpdate("update pessoas set nome = '" + name + "' where cpf = '" + cpf + "'");
			comandSql.executeUpdate("update pessoas set rg = '" + rg + "' where cpf = '" + cpf + "'");
			comandSql.executeUpdate("update pessoas set telefoneDdd = '" + ddd + "' where cpf = '" + cpf + "'");
			comandSql.executeUpdate("update pessoas set telefone = '" + phone + "' where cpf = '" + cpf + "'");
			comandSql.executeUpdate("update pessoas set email = '" + email + "' where cpf = '" + cpf + "'");
			System.out.println("Insert executado com sucesso: " + conn);
			
			closeConection(conn);
			
			try {
				for(int i = 0; i < totalOwner; i++) {
					if(modelOwners[i].getCpf() == cpf) {
						modelOwners[i].setName(name);
						modelOwners[i].setRg(rg);
						modelOwners[i].setDdd(ddd);
						modelOwners[i].setPhone(phone);
						modelOwners[i].setEmail(email);
						break;
					}
				}				
			} catch (NullPointerException e) {
			}
			
		} catch(SQLException e) {
			System.out.println("Erro de insert: " + e);
		}
	}
}